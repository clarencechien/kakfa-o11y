version: '3.8'

services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command:
      - '-config.file=/etc/loki/loki-config.yaml'
    restart: unless-stopped

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200" # Tempo HTTP
      - "14317:14317" # Tempo OTLP gRPC (different port)
      - "14318:14318" # Tempo OTLP HTTP (different port)
    volumes:
      - ./tempo:/etc/tempo
      - tempo_data:/var/tempo
    command:
      - '-config.file=/etc/tempo/tempo.yaml'
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command:
      - '--config=/etc/otelcol-contrib/config.yaml'
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "8889:8889" # Prometheus exporter
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    depends_on:
      - loki
      - tempo
      - prometheus
    restart: unless-stopped

  java-producer:
    build:
      context: ./java-producer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
    environment:
      OTEL_SERVICE_NAME: "java-kafka-producer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  java-consumer:
    build:
      context: ./java-consumer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
      - java-producer # Optional: to ensure producer starts first, though Kafka handles queuing
    environment:
      OTEL_SERVICE_NAME: "java-kafka-consumer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  python-producer:
    build:
      context: ./python-producer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
    environment:
      OTEL_SERVICE_NAME: "python-kafka-producer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  python-consumer:
    build:
      context: ./python-consumer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
      # - python-producer # Optional dependency
    environment:
      OTEL_SERVICE_NAME: "python-kafka-consumer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  go-producer:
    build:
      context: ./go-producer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
    environment:
      OTEL_SERVICE_NAME: "go-kafka-producer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "otel-collector:4317" # OTLP gRPC endpoint
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  go-consumer:
    build:
      context: ./go-consumer
    restart: on-failure
    depends_on:
      - kafka
      - otel-collector
      # - go-producer # Optional
    environment:
      OTEL_SERVICE_NAME: "go-kafka-consumer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "otel-collector:4317"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"

  streamlit-app:
    build:
      context: ./streamlit-app
    ports:
      - "8501:8501"
    restart: on-failure
    depends_on:
      - grafana # For links to Grafana
      - otel-collector # General dependency for the o11y stack
    environment:
      # This URL is for the Streamlit app to construct links for the user's browser.
      # It assumes Grafana is accessible on localhost:3000 from the user's machine.
      GRAFANA_URL: "http://localhost:3000"

volumes:
  grafana_data: {}
  prometheus_data: {}
  loki_data: {}
  tempo_data: {}
